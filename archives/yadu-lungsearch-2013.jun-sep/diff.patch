--- exsearch.py	2013-09-23 13:54:24.000000000 -0500
+++ not_using/exsearch_original.py	2013-06-13 17:08:46.000000000 -0500
@@ -1,6 +1,5 @@
-#! /usr/bin/env python
+
 '''
-Sam Volchenboum
 
 Loads in CSV with data in rows. 
 First row are headers.
@@ -15,8 +14,6 @@
 If <save_data> = True, will write all points for classification rate better than <save_rank>
 If <save_data> = False, will write nothing for classification rate less than <save_rank>
 <library_name> = annotation file from Affymetrix
-
-Usage notes: python exsearch.py 100 10 aout -Scott 05/30/2013 skrieder@iit.edu
 '''
 import warnings
 warnings.filterwarnings("ignore", category=RuntimeWarning)
@@ -24,19 +21,17 @@
 #import pylab as pl
 import numpy as np
 import os
-
 #from sklearn.linear_model import LogisticRegression
 from sklearn.svm import SVC
 #from sklearn import datasets
 from sklearn.preprocessing import scale
 #from itertools import izip
-from itertools import combinations, islice
+from itertools import combinations
 from scipy.stats import tmean, ttest_ind
 #from numpy import std
 #from random import randint
-from math import factorial, ceil
+from math import factorial
 from operator import itemgetter, attrgetter
-import sys
 
 # DD = [[1,22000],[4,22000],[3,22000],[2,22000]]
 # #DD = [[5,20]]
@@ -50,7 +45,7 @@
 
 def write_file(output_file, filename, directory='.', add_cr = True):
 	'''Writes output_file to filename'''
-	newfile = open(filename, "w")
+	newfile = open(directory+"/"+filename+".csv", "w")
 	for a in output_file:
 		if (add_cr == True):
 			newfile.write(a+"\n")
@@ -60,10 +55,6 @@
 
 def readfile(name_of_file, directory=".", cr = 1):
 	print "Loading "+name_of_file+"..."
-	#
-	# print "NAME",name_of_file, type(name_of_file)
-	# print "DIR",directory, type(directory)
-	#
 	file_data = open(directory+"/"+name_of_file)
 	file_contents = file_data.readlines()
 	output = []
@@ -74,8 +65,8 @@
 			output.append(line)
 	return output
 
-def load_data(filename,f,r): #r = starting row for the data
-	D = readfile(results_filename,f)
+def load_data(filename,r): #r = starting row for the data
+	D = readfile(results_filename,".")
 	D = [a.replace('\r','').split(',') for a in D]
 	D = D[0:r] + [[a[0]] + [float(b) for b in a[1:]] for a in D[r:]]
 	return D
@@ -137,108 +128,85 @@
 
 		
 		total = factorial((len(D))) / (factorial(len(D) - combo)  * factorial(combo) ) 
-		print "Total combinations\t",total
-		print "Taking at a time\t",combo
+		print "There are",total,"combinations."
 
-		numSlices   = int(sys.argv[1])
-		sliceNumber = int(sys.argv[2])
-		outFileName = sys.argv[3]
-
-		iterPerGroup = int(ceil(float(total)/float(numSlices))) 
-		firstIter = sliceNumber * iterPerGroup
-
-		print "Number of slices\t", numSlices
-		print "Slice number\t\t",sliceNumber
-		print "Iterations per group\t", iterPerGroup
-		print "First iteration\t\t", firstIter
-		print "Last iteration\t\t", firstIter+iterPerGroup
-		print "outFileName\t\t", outFileName
-		print
-		
-		slices = [ islice(groups,firstIter,firstIter+iterPerGroup) ]
-		for slice_number,S in enumerate(slices): # FIXME: eiminate this loop
-			output = []	
-			counter = 0
-			for group in groups:
-				#group = [a for a in group] + [FOX] # for adding FOXM1
+		counter = 0
+		#combo += 1 # for adding FOXM1
+
+		#for group in groups:
+		for group in groups:
+			#group = [a for a in group] + [FOX] # for adding FOXM1
+	
+			# for line in group:
+			# 	print line
+			# 	print len(line)
+			# 	print
+			# exit()
 	
-				# for line in group:
+			if counter%10000 == 0: print counter
+			counter += 1
+			
+			if rank:
+				sym = [a[0]+" , "+lib[a[0]][7]+" , "+lib[a[0]][8]+" , "+str(a[-1]) for a in group]
+				lines = [[float(a) for a in b[1:-2]] for b in group] # remove the t-test and rank
+				
+				# print sym
+				# for line in lines:
 				# 	print line
 				# 	print len(line)
 				# 	print
 				# exit()
-	
-				if counter%10000 == 0: print counter
-				counter += 1
-			
-				if rank:
-					sym = [a[0]+" , "+lib[a[0]][7]+" , "+lib[a[0]][8]+" , "+str(a[-1]) for a in group]
-					lines = [[float(a) for a in b[1:-2]] for b in group] # remove the t-test and rank
+				# 
 				
-					# print sym
-					# for line in lines:
-					# 	print line
-					# 	print len(line)
-					# 	print
-					# exit()
-					# 
-				
-				else:
-					sym = [a[0]+" , "+lib[a[0]][7]+" , "+lib[a[0]][8] for a in group]
-					lines = [[float(a) for a in b[1:]] for b in group] 				
-				training_data = zip(*lines)
-				X = np.array(training_data)
-				X = scale(X)
-				Y = np.array(training_labels)
-
-				n_features = X.shape[1]
-				C = 1.0
-				name =  'Linear SVC'
-				clf = SVC(kernel='linear', C=C, probability=True)
-				clf.fit(X, Y)
-				y_pred = clf.predict(X)
-				classif_rate = np.mean(y_pred.ravel() == Y.ravel()) * 100
+			else:
+				sym = [a[0]+" , "+lib[a[0]][7]+" , "+lib[a[0]][8] for a in group]
+				lines = [[float(a) for a in b[1:]] for b in group] 				
+			training_data = zip(*lines)
+			X = np.array(training_data)
+			X = scale(X)
+			Y = np.array(training_labels)
+
+			n_features = X.shape[1]
+			C = 1.0
+			name =  'Linear SVC'
+			clf = SVC(kernel='linear', C=C, probability=True)
+			clf.fit(X, Y)
+			y_pred = clf.predict(X)
+			classif_rate = np.mean(y_pred.ravel() == Y.ravel()) * 100
 			
-				# if classif_rate > 80 and '202580_x_at' in [a.split(',')[0].replace(' ','') for a in sym]:
-				# 	print classif_rate, sym
+			# if classif_rate > 80 and '202580_x_at' in [a.split(',')[0].replace(' ','') for a in sym]:
+			# 	print classif_rate, sym
 			
-				if classif_rate > 89:
-					print classif_rate, sym
+			if classif_rate > 89:
+				print classif_rate, sym
 			
-				# print sym
-				# if 'ARNTL2' in sym:	
-				# 	print sym, classif_rate
+			# print sym
+			# if 'ARNTL2' in sym:	
+			# 	print sym, classif_rate
 			
-				if print_to_screen and classif_rate > max_class: # keep track of the best combo so far...	
-					points = [[a[n] for a in X] for n in range(combo)]
-					print sym,classif_rate
-					if print_to_screen == "points":
-						for P in points:
-							for p in P:
-								print p
-							print
-							print "-------------------------------------------------"
-					max_class = classif_rate
-				if classif_rate >= save_rank: # save all the data. If you want all data for everything, make save_data = True, and save_rank = 0
-					points = [[a[n] for a in X] for n in range(combo)] # the raw data to save later
-					#print points
-					#exit()
-					output.append([sym,classif_rate,points])
-				elif classif_rate < save_rank and save_data: # 
-					output.append([sym,classif_rate]) # if save_data = False or 0, only save the features and rate - but not the data
-				elif save_data == False:
-					continue
-			output.sort(lambda x,y:cmp(y[1],x[1]))
-			#print "SUB",subname
-			#print "TYPE",type(working_folder),type(timestampe),type(subname)
-			# newfilename = working_folder + "/" + timestamp + "/" + outFileName
-			newfilename = outFileName
-			# print "NNAME",newfilename
-			# exit()
-			write_output(output,newfilename)
+			if print_to_screen and classif_rate > max_class: # keep track of the best combo so far...	
+				points = [[a[n] for a in X] for n in range(combo)]
+				print sym,classif_rate
+				if print_to_screen == "points":
+					for P in points:
+						for p in P:
+							print p
+						print
+						print "-------------------------------------------------"
+				max_class = classif_rate
+			if classif_rate >= save_rank: # save all the data. If you want all data for everything, make save_data = True, and save_rank = 0
+				points = [[a[n] for a in X] for n in range(combo)] # the raw data to save later
+				#print points
+				#exit()
+				output.append([sym,classif_rate,points])
+			elif classif_rate < save_rank and save_data: # 
+				output.append([sym,classif_rate]) # if save_data = False or 0, only save the features and rate - but not the data
+			elif save_data == False:
+				continue
+	output.sort(lambda x,y:cmp(y[1],x[1]))
 	return output
 
-def write_output(output, filename):
+def write_output(output):
 	#combos_to_test = [3]
 	d = ','
 	
@@ -259,10 +227,10 @@
 			newline = ','.join([a for a in line[0]])  + d * len(leader) * (max(combos_to_test) - len(line[0])) + d + str(line[1]) 
 		newout.append(newline)
 
-	write_file(newout, filename, add_cr = True)
+	write_file(newout, "data", directory=timestamp, add_cr = True)
 	return
 
-def get_library(library,r):
+def get_library(library):
 	# creates dictionary of probes and symbols
 	'''
 	0 Probe Set ID
@@ -293,7 +261,7 @@
 	25 Annotation Notes
 	'''
 
-	lib = readfile(library, r)
+	lib = readfile(library)
 	lib = [line.split(',') for line in lib]
 	lib_d = {}
 	for line in lib:
@@ -307,21 +275,19 @@
 # for example, save_data = True, save_rank = 80.0, will save all data for above 80% and only classitification rate for less than 80%
 # for example, save_data = False, save_rank = 80, will save all data for above 80% and nothing for less than 80%
 # if save_data = True, and save_rank = 100.0, will save rate only for everything. If rank = 0, will save all points for everything
-rank = 10 # can either be false or a number, in which case it is the number of top and bottom features to keep after t-test. False means no t-test, use all features
+rank = 30 # can either be false or a number, in which case it is the number of top and bottom features to keep after t-test. False means no t-test, use all features
 combos_to_test = [2] # numbers of features to test. e,g, 1,2 means test all single gene and then all two gene combos
 data_row_start = 14 # data starts at this row
 #feature,feature_index,values = "Death",4,[0,1]
-
-
 library_name = 'HG-U133A_2.na33.annot.csv'
+lib = get_library(library_name) # dictionary of probes and symbols
 working_folder = "./"
-lib = get_library(library_name,working_folder) # dictionary of probes and symbols
 timestamp = str(int(time.time()))
-if not os.path.isdir(working_folder + "/" + timestamp):
-	os.mkdir(working_folder + "/" + timestamp) # create output directory
+os.mkdir(working_folder + timestamp) # create output directory
 #results_filename = 'Lung_Cancer_Sample_Data.csv'
 results_filename = 'Consortium_expr_full_pheno_no_affx.csv'
-data = load_data(results_filename,working_folder,data_row_start)
+data = load_data(working_folder + results_filename,data_row_start)
+
 '''
 0 UniqueID
 1 histology
@@ -394,8 +360,8 @@
 # 	print i,line
 # exit()
 output = test_combos(data, training_labels,data_row_start)
-#write_output(output)
+write_output(output)
 	
-#exit()
+exit()
 
 
